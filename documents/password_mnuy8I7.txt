from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils import timezone
from .forms import CustomUserCreationForm, CustomUserChangeForm, FormationForm, DemandeFormationForm
from apps.authentification.models import CustomUser
from .models import Formation, DemandeFormation , Avance
from .models import Formation 
from .models import Conge 
from .forms import FormationForm , DemandeAvanceForm , DemandeCongeForm
from django.contrib.auth.decorators import login_required, user_passes_test
from .forms import FormationForm, DemandeFormationForm ,SelectDepartementForm
from django.http import JsonResponse
from django.views.decorators.http import require_GET
import logging
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.utils import timezone
from datetime import timedelta
import json
from .models import Conge
from django.core.paginator import Paginator
from django.db import transaction
from .forms import Departement
from django.views.decorators.http import require_POST
logger = logging.getLogger(__name__)
from .forms import PhotoProfilForm
from django.contrib.admin.views.decorators import staff_member_required
from django.shortcuts import render

from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required, user_passes_test
from django.contrib import messages
from django.utils import timezone
from .models import Conge
from .forms import TraiterCongeForm
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
from django.db.models import Count, Sum, Q
from django.db.models.functions import TruncMonth
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth.decorators import login_required, user_passes_test
from django.db import transaction
import logging

from django.shortcuts import render
from django.contrib.auth.decorators import login_required, user_passes_test
from datetime import date, datetime
import calendar
import json
from django.db.models import Q, Sum
from .models import Conge

from django.shortcuts import render
from django.contrib.auth.decorators import login_required, user_passes_test
from datetime import date
import calendar
import json
from django.db.models import Q, Count, Sum
from .models import Formation, DemandeFormation, Departement



# views.py
from django.shortcuts import render
from django.contrib.auth.decorators import login_required, user_passes_test
from datetime import date
import calendar
import json
from django.db.models import Sum, Avg, Count
from .models import Avance
from apps.authentification.models import CustomUser

from django.shortcuts import render
from django.contrib.auth.decorators import login_required, user_passes_test
from datetime import date, timedelta
import calendar
import json
from django.db.models import Count, Sum, Avg, F, ExpressionWrapper, fields
from django.db.models.functions import Coalesce
from apps.authentification.models import CustomUser
from .models import Avance, Conge, DemandeFormation
html



































css




:root {
    --primary: #4361ee;
    --primary-dark: #3a56d4;
    --primary-light: #e6e9ff;
    --secondary: #3f37c9;
    --accent: #4cc9f0;
    --success: #38b000;
    --warning: #ffaa00;
    --danger: #ef233c;
    --light: #f8f9fa;
    --dark: #212529;
    --radius: 12px;
    --shadow: 0 4px 20px rgba(0,0,0,0.1);
    --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    --glass: rgba(255,255,255,0.85);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', 'Segoe UI', system-ui, sans-serif;
}

body {
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--dark);
    overflow: hidden;
    position: relative;
}

/* Animated Gradient Background */
.gradient-bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
    background-size: 400% 400%;
    animation: gradient 15s ease infinite;
}

@keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

.container {
    background: var(--glass);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: var(--radius);
    box-shadow: var(--shadow);
    padding: 2.5rem;
    width: 95%;
    max-width: 600px;
    border: 1px solid rgba(255,255,255,0.3);
    transition: var(--transition);
}

.container:hover {
    box-shadow: 0 8px 32px rgba(0,0,0,0.2);
    transform: translateY(-5px);
}

h1 {
    text-align: center;
    margin-bottom: 1.5rem;
    color: var(--primary-dark);
    font-weight: 700;
    font-size: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
}

h1 i {
    color: var(--accent);
}

.password-container {
    position: relative;
    margin-bottom: 2rem;
}

.password-display {
    background: rgba(255,255,255,0.7);
    border: 2px dashed rgba(67, 97, 238, 0.3);
    border-radius: var(--radius);
    padding: 1.25rem 4rem 1.25rem 1.5rem;
    font-size: 1.4rem;
    font-family: 'Fira Code', monospace;
    word-break: break-all;
    text-align: center;
    min-height: 70px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    transition: var(--transition);
    box-shadow: var(--shadow);
}

.password-display:hover {
    border-color: var(--primary);
    background: white;
}

.password-actions {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    display: flex;
    gap: 0.5rem;
}

.action-btn {
    background: var(--light);
    color: var(--primary);
    border: none;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    cursor: pointer;
    transition: var(--transition);
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: var(--shadow);
}

.action-btn:hover {
    background: var(--primary);
    color: white;
    transform: translateY(-3px);
}

.action-btn:active {
    transform: translateY(0);
}

.controls {
    margin-bottom: 2rem;
}

.control-group {
    margin-bottom: 1.25rem;
}

.control-group label {
    display: flex;
    align-items: center;
    margin-bottom: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: var(--transition);
}

.control-group label:hover {
    color: var(--primary-dark);
}

input[type="range"] {
    width: 100%;
    height: 8px;
    -webkit-appearance: none;
    background: linear-gradient(to right, var(--primary), var(--secondary));
    border-radius: 4px;
    outline: none;
    margin: 1rem 0;
}

input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 22px;
    height: 22px;
    background: white;
    border: 3px solid var(--primary);
    border-radius: 50%;
    cursor: pointer;
    transition: var(--transition);
}

input[type="range"]::-webkit-slider-thumb:hover {
    transform: scale(1.1);
    background: var(--primary-light);
}

input[type="checkbox"] {
    width: 20px;
    height: 20px;
    margin-right: 0.75rem;
    cursor: pointer;
    accent-color: var(--primary);
}

.length-display {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.5rem;
}

.length-value {
    font-weight: bold;
    color: var(--primary);
    font-size: 1.2rem;
    background: var(--primary-light);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
}

.strength-meter {
    margin-top: 2rem;
    background: rgba(255,255,255,0.7);
    padding: 1.25rem;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
}

.strength-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.75rem;
    font-weight: 600;
}

.strength-bars {
    display: flex;
    gap: 0.5rem;
    height: 10px;
    margin-bottom: 0.5rem;
}

.strength-bar {
    flex: 1;
    height: 100%;
    background-color: #eee;
    border-radius: 5px;
    transition: var(--transition);
}

.strength-label {
    font-size: 0.9rem;
    font-weight: bold;
    text-align: right;
    color: var(--primary-dark);
}

.btn-group {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 1.5rem;
}

.btn {
    background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    color: white;
    border: none;
    border-radius: 50px;
    padding: 1rem 2rem;
    font-size: 1rem;
    cursor: pointer;
    transition: var(--transition);
    font-weight: 600;
    box-shadow: 0 4px 15px rgba(67, 97, 238, 0.3);
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(67, 97, 238, 0.4);
}

.btn:active {
    transform: translateY(0);
}

.btn-secondary {
    background: white;
    color: var(--primary);
    border: 2px solid var(--primary-light);
}

.btn-secondary:hover {
    background: var(--primary-light);
}

.history-container {
    margin-top: 2.5rem;
    border-top: 1px solid rgba(0,0,0,0.05);
    padding-top: 1.5rem;
}

.history-title {
    font-weight: 600;
    margin-bottom: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: var(--primary-dark);
}

.history-list {
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid rgba(0,0,0,0.05);
    border-radius: var(--radius);
    background: rgba(255,255,255,0.7);
}

.history-item {
    padding: 0.75rem 1.25rem;
    border-bottom: 1px solid rgba(0,0,0,0.05);
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-family: 'Fira Code', monospace;
    transition: var(--transition);
}

.history-item:hover {
    background: white;
}

.history-item:last-child {
    border-bottom: none;
}

.history-actions {
    display: flex;
    gap: 0.5rem;
}

/* Floating bubbles background */
.bubbles {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
}

.bubble {
    position: absolute;
    bottom: -100px;
    background: rgba(255,255,255,0.1);
    border-radius: 50%;
    animation: rise 15s infinite ease-in;
}

.bubble:nth-child(1) {
    width: 40px;
    height: 40px;
    left: 10%;
    animation-duration: 8s;
}

.bubble:nth-child(2) {
    width: 20px;
    height: 20px;
    left: 20%;
    animation-duration: 5s;
    animation-delay: 1s;
}

.bubble:nth-child(3) {
    width: 50px;
    height: 50px;
    left: 35%;
    animation-duration: 7s;
    animation-delay: 2s;
}

.bubble:nth-child(4) {
    width: 80px;
    height: 80px;
    left: 50%;
    animation-duration: 11s;
    animation-delay: 0s;
}

.bubble:nth-child(5) {
    width: 35px;
    height: 35px;
    left: 55%;
    animation-duration: 6s;
    animation-delay: 1s;
}

.bubble:nth-child(6) {
    width: 45px;
    height: 45px;
    left: 65%;
    animation-duration: 8s;
    animation-delay: 3s;
}

.bubble:nth-child(7) {
    width: 25px;
    height: 25px;
    left: 75%;
    animation-duration: 7s;
    animation-delay: 2s;
}

.bubble:nth-child(8) {
    width: 80px;
    height: 80px;
    left: 80%;
    animation-duration: 6s;
    animation-delay: 1s;
}

@keyframes rise {
    0% {
        bottom: -100px;
        transform: translateX(0);
    }
    50% {
        transform: translateX(100px);
    }
    100% {
        bottom: 1080px;
        transform: translateX(-200px);
    }
}

/* Responsive design */
@media (max-width: 768px) {
    .container {
        padding: 1.5rem;
    }
    
    h1 {
        font-size: 1.5rem;
    }
    
    .password-display {
        font-size: 1.1rem;
        padding: 1rem 3.5rem 1rem 1rem;
    }
    
    .btn-group {
        flex-direction: column;
    }
    
    .btn {
        width: 100%;
        justify-content: center;
    }
}

/* Custom scrollbar */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: rgba(0,0,0,0.05);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb {
    background: var(--primary);
    border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
    background: var(--primary-dark);
}

/* Tooltip */
.tooltip {
    position: relative;
    display: inline-block;
}

.tooltip .tooltiptext {
    visibility: hidden;
    width: 120px;
    background-color: var(--dark);
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px;
    position: absolute;
    z-index: 1;
    bottom: 125%;
    left: 50%;
    margin-left: -60px;
    opacity: 0;
    transition: opacity 0.3s;
    font-size: 0.8rem;
}

.tooltip:hover .tooltiptext {
    visibility: visible;
    opacity: 1;
}



















jssss









document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const passwordDisplay = document.getElementById('password');
    const generateBtn = document.getElementById('generateBtn');
    const copyBtn = document.getElementById('copyBtn');
    const refreshBtn = document.getElementById('refreshBtn');
    const saveBtn = document.getElementById('saveBtn');
    const clearHistoryBtn = document.getElementById('clearHistoryBtn');
    const lengthSlider = document.getElementById('length');
    const lengthValue = document.getElementById('lengthValue');
    const uppercaseCheckbox = document.getElementById('uppercase');
    const lowercaseCheckbox = document.getElementById('lowercase');
    const numbersCheckbox = document.getElementById('numbers');
    const symbolsCheckbox = document.getElementById('symbols');
    const excludeSimilarCheckbox = document.getElementById('excludeSimilar');
    const strengthBars = [
        document.getElementById('strengthBar1'),
        document.getElementById('strengthBar2'),
        document.getElementById('strengthBar3'),
        document.getElementById('strengthBar4')
    ];
    const strengthScore = document.getElementById('strengthScore');
    const historyList = document.getElementById('historyList');
    const historySection = document.getElementById('historySection');

    // Similar characters to exclude
    const similarChars = '1lLIi0oO';

    // Load password history from localStorage
    let passwordHistory = JSON.parse(localStorage.getItem('passwordHistory')) || [];
    updateHistoryDisplay();

    // Update length value display
    lengthSlider.addEventListener('input', function() {
        lengthValue.textContent = this.value;
    });

    // Generate password function
    function generatePassword() {
        const length = lengthSlider.value;
        const hasUpper = uppercaseCheckbox.checked;
        const hasLower = lowercaseCheckbox.checked;
        const hasNumber = numbersCheckbox.checked;
        const hasSymbol = symbolsCheckbox.checked;
        const excludeSimilar = excludeSimilarCheckbox.checked;
        
        let password = generatePasswordString(hasUpper, hasLower, hasNumber, hasSymbol, length, excludeSimilar);
        
        // Check if at least one character type is selected
        if (!hasUpper && !hasLower && !hasNumber && !hasSymbol) {
            password = "Select at least one type";
            strengthScore.textContent = "None";
            resetStrengthBars();
            return password;
        }
        
        passwordDisplay.textContent = password;
        updateStrengthIndicator(password);
        return password;
    }

    // Main password generation function
    function generatePasswordString(upper, lower, number, symbol, length, excludeSimilar) {
        let chars = '';
        let password = '';
        
        if (upper) chars += 'ABCDEFGHJKLMNPQRSTUVWXYZ';
        if (lower) chars += 'abcdefghijkmnopqrstuvwxyz';
        if (number) chars += '23456789';
        if (symbol) chars += '!@#$%^&*()_+-=[]{}|;:,.<>?';
        
        // Exclude similar characters if requested
        if (excludeSimilar) {
            for (const char of similarChars) {
                chars = chars.replace(char, '');
            }
        }
        
        // Check if we have any characters left
        if (chars.length === 0) return "No available characters";
        
        // Generate the password
        for (let i = 0; i < length; i++) {
            const randomIndex = Math.floor(Math.random() * chars.length);
            password += chars[randomIndex];
        }
        
        return password;
    }

    // Generate button
    generateBtn.addEventListener('click', function() {
        generatePassword();
    });

    // Refresh button
    refreshBtn.addEventListener('click', function() {
        generatePassword();
    });

    // Copy button
    copyBtn.addEventListener('click', function() {
        const password = passwordDisplay.textContent;
        if (password && !password.includes("Select") && !password.includes("No")) {
            navigator.clipboard.writeText(password).then(function() {
                showTooltip(copyBtn, "Copied!");
                setTimeout(() => {
                    const tooltip = copyBtn.querySelector('.tooltiptext');
                    if (tooltip) tooltip.textContent = "Copy to clipboard";
                }, 2000);
            });
        }
    });

    // Save button
    saveBtn.addEventListener('click', function() {
        const password = passwordDisplay.textContent;
        if (password && !password.includes("Select") && !password.includes("No")) {
            // Check if password is not already in history
            if (!passwordHistory.includes(password)) {
                passwordHistory.unshift(password); // Add to beginning
                
                // Limit history to 10 items
                if (passwordHistory.length > 10) {
                    passwordHistory.pop();
                }
                
                // Save to localStorage
                localStorage.setItem('passwordHistory', JSON.stringify(passwordHistory));
                updateHistoryDisplay();
                showTooltip(saveBtn, "Saved!");
            } else {
                showTooltip(saveBtn, "Already in history");
            }
        }
    });

    // Clear history button
    clearHistoryBtn.addEventListener('click', function() {
        passwordHistory = [];
        localStorage.removeItem('passwordHistory');
        updateHistoryDisplay();
        showTooltip(clearHistoryBtn, "History cleared");
    });

    // Update history display
    function updateHistoryDisplay() {
        historyList.innerHTML = '';
        
        if (passwordHistory.length === 0) {
            historySection.style.display = 'none';
            return;
        }
        
        historySection.style.display = 'block';
        
        passwordHistory.forEach((password, index) => {
            const item = document.createElement('div');
            item.className = 'history-item';
            item.innerHTML = `
                <span>${password}</span>
                <div class="history-actions">
                    <button class="action-btn copy-history-btn" data-password="${password}">
                        <i class="fas fa-copy"></i>
                    </button>
                    <button class="action-btn delete-history-btn" data-index="${index}">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            historyList.appendChild(item);
        });
        
        // Add event listeners for new buttons
        document.querySelectorAll('.copy-history-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const password = this.getAttribute('data-password');
                navigator.clipboard.writeText(password).then(() => {
                    showTooltip(this, "Copied!");
                });
            });
        });
        
        document.querySelectorAll('.delete-history-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const index = parseInt(this.getAttribute('data-index'));
                passwordHistory.splice(index, 1);
                localStorage.setItem('passwordHistory', JSON.stringify(passwordHistory));
                updateHistoryDisplay();
            });
        });
    }

    // Password strength indicator
    function updateStrengthIndicator(password) {
        const strength = calculatePasswordStrength(password);
        
        // Reset bars
        resetStrengthBars();
        
        // Update bars based on strength
        for (let i = 0; i < strength.score; i++) {
            strengthBars[i].style.backgroundColor = getStrengthColor(strength.score);
        }
        
        // Update text
        strengthScore.textContent = getStrengthText(strength.score);
    }

    function resetStrengthBars() {
        strengthBars.forEach(bar => {
            bar.style.backgroundColor = '#eee';
        });
    }

    function calculatePasswordStrength(password) {
        let score = 0;
        
        // Length
        if (password.length >= 8) score++;
        if (password.length >= 12) score++;
        
        // Complexity
        if (/[A-Z]/.test(password)) score++;
        if (/[a-z]/.test(password)) score++;
        if (/[0-9]/.test(password)) score++;
        if (/[^A-Za-z0-9]/.test(password)) score++;
        
        // Limit score to 4 (max bars)
        return { score: Math.min(4, score) };
    }

    function getStrengthColor(score) {
        const colors = ['#e74c3c', '#f39c12', '#f1c40f', '#2ecc71', '#27ae60'];
        return colors[score];
    }

    function getStrengthText(score) {
        const texts = ['Very Weak', 'Weak', 'Medium', 'Strong', 'Very Strong'];
        return texts[score];
    }

    // Show temporary tooltip
    function showTooltip(element, message) {
        const tooltip = element.querySelector('.tooltiptext');
        if (tooltip) {
            const originalText = tooltip.textContent;
            tooltip.textContent = message;
            setTimeout(() => {
                tooltip.textContent = originalText;
            }, 2000);
        }
    }

    // Generate password on load
    generatePassword();
});

















